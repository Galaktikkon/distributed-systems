# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Servants.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Servants
_M_Servants = Ice.openModule('Servants')
__name__ = 'Servants'

_M_Servants._t_Dedicated = IcePy.defineValue('::Servants::Dedicated', Ice.Value, -1, (), False, True, None, ())

if 'DedicatedPrx' not in _M_Servants.__dict__:
    _M_Servants.DedicatedPrx = Ice.createTempClass()
    class DedicatedPrx(Ice.ObjectPrx):

        def sayHello(self, context=None):
            return _M_Servants.Dedicated._op_sayHello.invoke(self, ((), context))

        def sayHelloAsync(self, context=None):
            return _M_Servants.Dedicated._op_sayHello.invokeAsync(self, ((), context))

        def begin_sayHello(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Servants.Dedicated._op_sayHello.begin(self, ((), _response, _ex, _sent, context))

        def end_sayHello(self, _r):
            return _M_Servants.Dedicated._op_sayHello.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Servants.DedicatedPrx.ice_checkedCast(proxy, '::Servants::Dedicated', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Servants.DedicatedPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Servants::Dedicated'
    _M_Servants._t_DedicatedPrx = IcePy.defineProxy('::Servants::Dedicated', DedicatedPrx)

    _M_Servants.DedicatedPrx = DedicatedPrx
    del DedicatedPrx

    _M_Servants.Dedicated = Ice.createTempClass()
    class Dedicated(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Servants::Dedicated')

        def ice_id(self, current=None):
            return '::Servants::Dedicated'

        @staticmethod
        def ice_staticId():
            return '::Servants::Dedicated'

        def sayHello(self, current=None):
            raise NotImplementedError("servant method 'sayHello' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Servants._t_DedicatedDisp)

        __repr__ = __str__

    _M_Servants._t_DedicatedDisp = IcePy.defineClass('::Servants::Dedicated', Dedicated, (), None, ())
    Dedicated._ice_type = _M_Servants._t_DedicatedDisp

    Dedicated._op_sayHello = IcePy.Operation('sayHello', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_Servants.Dedicated = Dedicated
    del Dedicated

_M_Servants._t_Shared = IcePy.defineValue('::Servants::Shared', Ice.Value, -1, (), False, True, None, ())

if 'SharedPrx' not in _M_Servants.__dict__:
    _M_Servants.SharedPrx = Ice.createTempClass()
    class SharedPrx(Ice.ObjectPrx):

        def getStatus(self, context=None):
            return _M_Servants.Shared._op_getStatus.invoke(self, ((), context))

        def getStatusAsync(self, context=None):
            return _M_Servants.Shared._op_getStatus.invokeAsync(self, ((), context))

        def begin_getStatus(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Servants.Shared._op_getStatus.begin(self, ((), _response, _ex, _sent, context))

        def end_getStatus(self, _r):
            return _M_Servants.Shared._op_getStatus.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Servants.SharedPrx.ice_checkedCast(proxy, '::Servants::Shared', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Servants.SharedPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Servants::Shared'
    _M_Servants._t_SharedPrx = IcePy.defineProxy('::Servants::Shared', SharedPrx)

    _M_Servants.SharedPrx = SharedPrx
    del SharedPrx

    _M_Servants.Shared = Ice.createTempClass()
    class Shared(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Servants::Shared')

        def ice_id(self, current=None):
            return '::Servants::Shared'

        @staticmethod
        def ice_staticId():
            return '::Servants::Shared'

        def getStatus(self, current=None):
            raise NotImplementedError("servant method 'getStatus' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Servants._t_SharedDisp)

        __repr__ = __str__

    _M_Servants._t_SharedDisp = IcePy.defineClass('::Servants::Shared', Shared, (), None, ())
    Shared._ice_type = _M_Servants._t_SharedDisp

    Shared._op_getStatus = IcePy.Operation('getStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_Servants.Shared = Shared
    del Shared

# End of module Servants
